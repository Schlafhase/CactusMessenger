@page "/verifyEmail"
@rendermode InteractiveServer
@using MessengerInterfaces.Security
@inherits AuthorizedPage

<PageTitle>Verify Email</PageTitle>
<StreakAlert @ref="_streakAlert"></StreakAlert>
<h1>@header</h1>
<Alert Type="@NotificationTypes.Warning"
       NotificationStyle="@NotificationStyles.Normal"
       ShowCloseButton="@true"
       AutoClose="@false"
       @bind-IsVisible="@alertShown">
	<Content>
		@((MarkupString)errorText)
	</Content>
</Alert>


<style>
	.sr-only {
		display: none;
	}

	.close {
		border-radius: 10px;
	}

	.balert-text {
		color: red;
	}
</style>

@code {

	[Parameter]
	[SupplyParameterFromQuery(Name = "token")]
	public string emailToken { get; set; } = "";

	string header = "Loading...";

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await Initialize(() => navigationManager.NavigateTo($"logout?redirectUrl=verifyEmail?token={emailToken}"));

			if (user is null)
			{
				return;
			}

			try
			{
				if (TokenVerification.ValidateToken<EmailVerifyToken>(emailToken))
				{
					SignedToken<EmailVerifyToken> token = TokenVerification.GetTokenFromString<EmailVerifyToken>(emailToken);

					if (token.Token.UserId == user.Id)
					{
						await messengerService.EditAccountEmail(token.Token.UserId, token.Token.Email);
						header = $"The email address {token.Token.Email} was added to your account.";
					}
					else
					{
						header = "Failed to add email address";
						errorText = "Access denied.";
						alertShown = true;
					}

					await InvokeAsync(StateHasChanged);
				}
			}
			catch (Exception ex)
			{
				errorText = ex.Message;
				alertShown = true;
				header = "Failed to add email address";
				await InvokeAsync(StateHasChanged);
			}
		}
	}

}
