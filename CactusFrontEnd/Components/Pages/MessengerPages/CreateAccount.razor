@page "/createAccount"
@rendermode InteractiveServer
@inject ProtectedLocalStorage ProtectedLocalStore
@using System.Text.RegularExpressions
@using CactusFrontEnd.Events
@using EmailService
@using Messenger
@using MessengerInterfaces
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inherits AuthorizedPage

<PageTitle>Create Account</PageTitle>

<ModalDialog @ref="_dialog"
             OverlayBackgroundColor="black"
             OverlayOpacity="0.5"
             CloseOnOverlayClick="true"
             CloseOnEscapeKey="true"
             ShowCloseButton="false">

	<Content>
		<Emails></Emails>
		<br/>
		<button style="margin-top:20px;" class="btn-cactus primary" @onclick="emailLearnMoreClose">Close</button>
	</Content>
</ModalDialog>

<h3>Create Account</h3>
<form @onsubmit="create">
	<label for="userIdInput">Username</label>
	<br/>
	<input class="form-control accountInput" type="text" id="userIdInput" name="userIdInput"
	       @bind-value="username"/><br/>
	<label style="width: 100%" for="passwordInput">Password <i style="float: right; opacity: 0.5">Passwords are stored as salted hashes</i></label>
	<br/>
	<input class="form-control accountInput passwordInput" type="@(showPassword ? "text" : "password")"
	       id="passwordInput" name="passwordInput" @bind-value="password"/><input class="showPassword" type="button"
	                                                                              style="background: url('/Images/@(showPassword ? "eye-icon.svg" : "eye-blind-icon.svg")') no-repeat; background-size: 20px;"
	                                                                              @onclick="@(() => showPassword = !showPassword)"></input>
	<br/>
	<label for="emailInput">Email (Optional)</label><a
		style="float: right; color:deepskyblue; text-decoration: underline;cursor:pointer;" @onclick="emailLearnMore">Learn
		more</a>
	<br/>
	<input class="form-control accountInput" type="text" id="emailInput" name="emailInput" @bind-value="email"/><br/>
	<label for="demo">
		<input id="demo" type="checkbox" @bind="demo"/> <span>Create a temporary account</span>
	</label>
	<br/>
	<i style="opacity: 0.5">Check this if you come from highseas. Your account (including all created messages and channels) will be deleted after @(CactusConstants.DemoAccountLifetime.Minutes) minutes.</i>
	<br/><br/>
	<label for="descriptionInput">Who are you?/Why do you want to create an Account?</label>
	<br/>
	<textarea disabled="@demo" class="form-control accountInput" id="descriptionInput" name="descriptionInput"
	          @bind="description"/><br/>
	By creating an Account you agree to the <a target="_blank" rel="noopener noreferrer" href="tos">Terms of Service</a><br/><br/>
	<input class="btn-cactus primary" type="submit" disabled="@requested"
	       value="@(!requested ? (demo ? "Create Temporary Account" : "Request Account") : "Processing...")"/>
	<span class="errorSpan">@errorString</span>
</form>

<style>
	form {
		width: min(100%, 700px);
		background-color: #13011c;
		border-radius: 15px;
		padding: 20px;
		box-shadow: 0px 0px 15px magenta;
	}

	#descriptionInput:disabled {
		background-color: white;
		opacity: 0.5;
		color: white;
		cursor: not-allowed;
	}
	
	[type="checkbox"] {
		transform: scale(1.2);
		margin-right: 5px;
	}
</style>

@code {
	private ModalDialog _dialog;
	private string password = "";
	private string username = "";
	private string email = "";
	private string description = "";
	private bool demo;
	private string errorString = "";
	private bool requested;
	private bool showPassword;
	private readonly Regex emailRegex = new(@"(?:[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*|""(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*"")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])");

	[Parameter]
	[SupplyParameterFromQuery(Name = "redirectUrl")]
	public string? RedirectUrl { get; set; }

	[Inject] private IMessengerService messengerService { get; set; }
	[Inject] private NavigationManager navigationManager { get; set; }
	[Inject] private EventService eventService { get; set; }
	[Inject] private EmailService emailService { get; set; }

	private async Task emailLearnMore()
	{
		await _dialog.Open();
	}

	private async Task emailLearnMoreClose()
	{
		await _dialog.Close();
	}

	private async Task create()
	{
		Account user;
		errorString = "";

		try
		{
			user = await messengerService.GetAccountByUsername(username);
		}
		catch (KeyNotFoundException)
		{
			if (username.Length < 3)
			{
				errorString = "Username must be at least 3 characters long";
				return;
			}

			if (username.Length > 40)
			{
				errorString = "Username can only be 40 characters long.";
				return;
			}

			if (password.Length < 4)
			{
				errorString = "Please provide a password with at least 4 characters.";
				return;
			}

			if (!string.IsNullOrWhiteSpace(email))
			{
				MatchCollection emailMatches = emailRegex.Matches(email.ToLower());

				if (emailMatches.Count == 0 || emailMatches[0].Value != email.ToLower())
				{
					errorString = "Invalid email address.";
					return;
				}
			}

			requested = true;
			await InvokeAsync(StateHasChanged);
			Guid id = Guid.NewGuid();

			try
			{
				id = await messengerService.CreateAccount(username, password, null, demo);
				emailService.Send("linus.schneeberg@schlafhase.uk", "Account Creation Request", EmailService.GenerateAccountRequestEmail(username, description, id, email, demo));
			}
			catch (Exception ex)
			{
				try
				{
					await messengerService.DeleteAccount(id);
				}
				catch (KeyNotFoundException) { }

				requested = false;
				errorString = ex.Message + " - Try again.";
				await InvokeAsync(StateHasChanged);
				return;
			}

			if (demo)
			{
				user = await messengerService.GetAccountByUsername(username);
				AuthorizationToken token = new(user.Id, DateTime.UtcNow);
				string tokenString = TokenVerification.GetTokenString(token);
				await ProtectedLocalStore.SetAsync(CactusConstants.AuthTokenKey, tokenString);
				eventService.TokenHasChanged();
				navigationManager.NavigateTo(RedirectUrl ?? "/");
				return;
			}
			
			navigationManager.NavigateTo("accountLocked");
			return;
		}

		errorString = "Username is taken";
	}

}